---
- hosts: jumpbox
  vars:
    cloud_name: ospcloud
  vars_files:     # for provision_instances tasks
    - vars/main.yml

  tasks:
    - name: create internal and external networks
      os_network:
        cloud: "{{ cloud_name }}"
        state: present
        name: "{{ item }}"
      loop:
        - int_network
        - ext_network

    - name: create public subnet
      os_subnet:
        name: publicnetwork1
        network_name: ext_network
        cidr: 10.10.10.0/24
        host_routes:
          - destination: 0.0.0.0/0
            nexthop: 10.10.10.0
          - destination: 192.168.0.0/24
            nexthop: 192.168.0.0
        dns_nameservers:
          - 8.8.8.7
          - 8.8.8.8
        state: present

    - name: create private subnet
      os_subnet:
        name: privatenetwork1
        network_name: int_network
        cidr: 20.20.20.0/24
        host_routes:
          - destination: 0.0.0.0/0
            nexthop: 20.20.20.0
          - destination: 192.168.0.0/24
            nexthop: 192.168.0.0
        dns_nameservers:
          - 8.8.8.7
          - 8.8.8.8
        state: present

    - name: generate key files
      user:
        name: "{{ ansible_env.USER }}"
        generate_ssh_key: yes
        ssh_key_file: .ssh/test_id_rsa

    - name: upload pub key to openstack
      os_keypair:
        cloud: "{{ cloud_name }}"
        state: present
        name: ansible_ssh
        public_key_file: "{{ ansible_env.HOME }}/.ssh/test_id_rsa.pub"

    - name: create custom flavor
      os_nova_flavor:
        cloud: "{{ cloud_name }}"
        state: present
        name: m2.small
        ram: 2048
        vcpus: 1
        disk: 10
# should be a role
    - name: create security groups
      os_security_group:
        cloud: "{{ cloud_name }}"
        state: present
        name: "{{ item }}"
        description: "open ports for {{ item }}"
      loop:
        - app_servers
        - db_servers
        - frontend_servers

# should be a role
    - name: add security group rules for app_servers
      os_security_group_rule:
        cloud: ospcloud
        security_group: app_servers
        protocol: tcp
        port_range_min: "{{ item.port }}"
        port_range_max: "{{ item.port }}"
        remote_ip_prefix: "{{ item.ip_prefix }}"
      with_items:
        - { port: '8080', ip_prefix: '0.0.0.0/0' }
        - { port: '22', ip_prefix: '0.0.0.0/0' }

    - name: add security group rules for db_servers
      os_security_group_rule:
        cloud: ospcloud
        security_group: db_servers
        protocol: tcp
        port_range_min: "{{ item.port }}"
        port_range_max: "{{ item.port }}"
        remote_ip_prefix: "{{ item.ip_prefix }}"
      with_items:
        - { port: '5432', ip_prefix: '20.20.20.0/24' }
        - { port: '22', ip_prefix: '0.0.0.0/0' }

    - name: add security group rules for frontend_servers
      os_security_group_rule:
        cloud: ospcloud
        security_group: frontend_servers
        protocol: tcp
        port_range_min: "{{ item.port }}"
        port_range_max: "{{ item.port }}"
        remote_ip_prefix: "{{ item.ip_prefix }}"
      with_items:
        - { port: '80', ip_prefix: '0.0.0.0/0' }
        - { port: '443', ip_prefix: '0.0.0.0/0' }
        - { port: '22', ip_prefix: '0.0.0.0/0' }

# should be a role
    - name: provision instances
      os_server:
        state: present
        name: "{{ item.key }}"
        image: "{{ item.value.image }}"
        key_name: "{{ item.value.key_name }}"
        flavor: "{{ item.value.flavor }}"
        security_groups: "{{ item.value.security_group_name }}"
        wait: yes
        network: int_network
        meta:
          group: "{{ item.value.group }}"
          deployment_name: "{{ item.value.deployment_name }}"
        userdata: |
          #!/bin/bash
          curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
          cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
          curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
          cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
      register: instance_details
      with_dict: "{{ app_stack }}"

    - name: Add floating IP
      os_floating_ip:
        cloud: "{{ cloud_name }}"
        state: present
        reuse: yes
        server: "{{ item.key }}"
        network: ext_network
        wait: true
        timeout: 180
      register: instance_floating_ip
      with_dict: "{{ app_stack }}"

    - name: Show public IP
      debug:
        var: instance_floating_ip.floating_ip.floating_ip_address

    - name: Wait for instance to be available
      wait_for:
        host: "{{ instance_floating_ip.floating_ip.floating_ip_address }}"
        port: 22
        search_regex: OpenSSH
        timeout: 600
      delegate_to: "{{ inventory_hostname }}"
